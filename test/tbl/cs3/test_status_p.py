import struct
import unittest
import cs3tbl


def cast_to_float(x):
    # Python floats are doubles while the tbls contain single-precision floats, so we need to do correct rounding explicitely
    return struct.unpack("f", struct.pack("f", x))[0]


class TestCS3StatusP(unittest.TestCase):
    def setUp(self):
        self.tbl = cs3tbl.Cs3.from_file("data/cs3/status_p.tbl")

    def testHeader(self):
        (header,) = self.tbl.header_extra.headers
        self.assertEqual(header.header_name, "status_p")
        self.assertEqual(header.num_entry, 1)

    def testEntries(self):
        (entry,) = self.tbl.entries
        self.assertEqual(
            entry.data.character_id.character_id, cs3tbl.Character.Characters.rean
        )
        self.assertEqual(entry.data.status.script, "chr000")
        self.assertEqual(entry.data.status.texture, "C_CHR000")
        self.assertEqual(entry.data.status.model, "chr000")
        self.assertEqual(entry.data.status.model_scale, cast_to_float(1.0))
        self.assertEqual(entry.data.status.camera_pivot_height, cast_to_float(1.775))
        self.assertEqual(entry.data.status.hitbox_size, cast_to_float(0.5))
        self.assertEqual(entry.data.status.unknown_float_1, cast_to_float(0.75))
        self.assertEqual(entry.data.status.unknown_float_2, cast_to_float(0.0))
        self.assertEqual(entry.data.status.unknown_float_3, cast_to_float(7.0))
        self.assertEqual(entry.data.status.unknown_float_4, cast_to_float(10.0))
        self.assertEqual(entry.data.status.unknown_short_1, 10)
        self.assertEqual(entry.data.status.unknown_short_2, 1)
        self.assertEqual(entry.data.status.is_female, 1)
        self.assertEqual(entry.data.status.level, 0)
        self.assertEqual(entry.data.status.hp_base, 420)
        self.assertEqual(entry.data.status.hp_growth, cast_to_float(105))
        self.assertEqual(entry.data.status.max_ep, 0)
        self.assertEqual(entry.data.status.start_ep, 0)
        self.assertEqual(entry.data.status.max_cp, 0)
        self.assertEqual(entry.data.status.start_cp, 0)
        self.assertEqual(entry.data.status.str_base, 48)
        self.assertEqual(entry.data.status.str_growth, cast_to_float(20))
        self.assertEqual(entry.data.status.def_base, 22)
        self.assertEqual(entry.data.status.def_growth, cast_to_float(2.44))
        self.assertEqual(entry.data.status.ats_base, 40)
        self.assertEqual(entry.data.status.ats_growth, cast_to_float(5.1))
        self.assertEqual(entry.data.status.adf_base, 24)
        self.assertEqual(entry.data.status.adf_growth, cast_to_float(2.61))
        self.assertEqual(entry.data.status.dex_base, 39)
        self.assertEqual(entry.data.status.dex_growth, cast_to_float(0.14))
        self.assertEqual(entry.data.status.agl_base, 25)
        self.assertEqual(entry.data.status.agl_growth, cast_to_float(0.145))
        self.assertEqual(entry.data.status.eva, 10)
        self.assertEqual(entry.data.status.spd_base, 40)
        self.assertEqual(entry.data.status.spd_growth, cast_to_float(0.148))
        self.assertEqual(entry.data.status.mov_base, 5)
        self.assertEqual(entry.data.status.mov_growth, cast_to_float(0))
        self.assertEqual(entry.data.status.exp_base, 0)
        self.assertEqual(entry.data.status.exp_growth, cast_to_float(0))
        self.assertEqual(entry.data.status.break_multiplier_base, 0)
        self.assertEqual(entry.data.status.break_multiplier_growth, cast_to_float(0))
        self.assertEqual(entry.data.status.earth_efficacy, 100)
        self.assertEqual(entry.data.status.water_efficacy, 100)
        self.assertEqual(entry.data.status.fire_efficacy, 100)
        self.assertEqual(entry.data.status.wind_efficacy, 100)
        self.assertEqual(entry.data.status.time_efficacy, 100)
        self.assertEqual(entry.data.status.space_efficacy, 100)
        self.assertEqual(entry.data.status.mirage_efficacy, 100)
        self.assertEqual(entry.data.status.psn_efficacy, 100)
        self.assertEqual(entry.data.status.seal_efficacy, 100)
        self.assertEqual(entry.data.status.mute_efficacy, 100)
        self.assertEqual(entry.data.status.blnd_efficacy, 100)
        self.assertEqual(entry.data.status.slp_efficacy, 100)
        self.assertEqual(entry.data.status.burn_efficacy, 100)
        self.assertEqual(entry.data.status.frz_efficacy, 100)
        self.assertEqual(entry.data.status.petr_efficacy, 100)
        self.assertEqual(entry.data.status.fnt_efficacy, 100)
        self.assertEqual(entry.data.status.conf_efficacy, 100)
        self.assertEqual(entry.data.status.chrm_efficacy, 100)
        self.assertEqual(entry.data.status.dblw_efficacy, 100)
        self.assertEqual(entry.data.status.nmr_efficacy, 100)
        self.assertEqual(entry.data.status.dlay_efficacy, 100)
        self.assertEqual(entry.data.status.vnsh_efficacy, 100)
        self.assertEqual(entry.data.status.s_dwn_efficacy, 100)
        self.assertEqual(entry.data.status.slash_efficacy, 100)
        self.assertEqual(entry.data.status.thrust_efficacy, 100)
        self.assertEqual(entry.data.status.pierce_efficacy, 100)
        self.assertEqual(entry.data.status.strike_efficacy, 100)
        self.assertEqual(entry.data.status.earth_sepith_base, 0)
        self.assertEqual(entry.data.status.water_sepith_base, 0)
        self.assertEqual(entry.data.status.fire_sepith_base, 0)
        self.assertEqual(entry.data.status.wind_sepith_base, 0)
        self.assertEqual(entry.data.status.time_sepith_base, 0)
        self.assertEqual(entry.data.status.space_sepith_base, 0)
        self.assertEqual(entry.data.status.mirage_sepith_base, 0)
        self.assertEqual(entry.data.status.sepith_mass_base, 0)
        self.assertEqual(entry.data.status.earth_sepith_growth, 0)
        self.assertEqual(entry.data.status.water_sepith_growth, 0)
        self.assertEqual(entry.data.status.fire_sepith_growth, 0)
        self.assertEqual(entry.data.status.wind_sepith_growth, 0)
        self.assertEqual(entry.data.status.time_sepith_growth, 0)
        self.assertEqual(entry.data.status.space_sepith_growth, 0)
        self.assertEqual(entry.data.status.mirage_sepith_growth, 0)
        self.assertEqual(entry.data.status.sepith_mass_growth, 0)
        self.assertEqual(entry.data.status.drop_id_1, 0)
        self.assertEqual(entry.data.status.drop_chance_1, 0)
        self.assertEqual(entry.data.status.drop_id_2, 0)
        self.assertEqual(entry.data.status.drop_chance_2, 0)
        self.assertEqual(entry.data.status.monster_variation_min, cast_to_float(1.0))
        self.assertEqual(entry.data.status.monster_variation_max, cast_to_float(1.0))
        self.assertEqual(entry.data.status.flags, "0")
        self.assertEqual(entry.data.status.name, "Not Rean")
        self.assertEqual(entry.data.status.description, "0")
